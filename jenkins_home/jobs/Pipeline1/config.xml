<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1520.v56d65e3b_4566">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2254.v2a_978de46f35"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2254.v2a_978de46f35">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4106.v7a_8a_8176d450">
    <script>pipeline {
     agent any
     tools {
            // Install the Maven version configured as &quot;M3&quot; and add it to the path.
           maven &quot;Maven&quot;
     }
     stages {
        stage(&apos;Build&apos;) {
           steps {
   // Get some code from a GitHub repository
  git &apos;https://github.com/jglick/simple-maven-project-with-tests.git&apos;
  // Run Maven on a Unix agent.
 sh &quot;mvn -Dmaven.test.failure.ignore=true clean package&quot;
 // To run Maven on a Windows agent, use
 // bat &quot;mvn -Dmaven.test.failure.ignore=true clean package&quot;
             }
            post {
  // If Maven was able to run the tests, even if some of the test
 // failed, record the test results and archive the jar file.
 success {
     junit &apos;**/target/surefire-reports/TEST-*.xml&apos;
    archiveArtifacts &apos;target/*.jar&apos;
 }
           }
       }
       stage(&apos;Test&apos;) {
             steps {
    echo &quot;Haciendo test&quot;
 }
        }      
       stage(&apos;Deploy&apos;) {
             steps {
    echo &quot;Haciendo deploy&quot;
 }
        }      
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>